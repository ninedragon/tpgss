<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zz.common.dao.t_fault_baseMapper" >
  <resultMap id="BaseResultMap" type="com.zz.common.model.t_fault_base" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="key_id" property="key_id" jdbcType="VARCHAR" />
    <result column="fault_type" property="fault_type" jdbcType="INTEGER" />
    <result column="occur_time" property="occur_time" jdbcType="TIMESTAMP" />
    <result column="is_cancelled" property="is_cancelled" jdbcType="INTEGER" />
    <result column="repair_time" property="repair_time" jdbcType="TIMESTAMP" />
    <result column="is_repaired" property="is_repaired" jdbcType="INTEGER" />
    <result column="substain_id" property="substain_id" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, type, key_id, fault_type, occur_time, is_cancelled, repair_time, is_repaired, 
    substain_id
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.zz.common.model.t_fault_baseExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_fault_base
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from t_fault_base
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from t_fault_base
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.zz.common.model.t_fault_baseExample" >
    delete from t_fault_base
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.zz.common.model.t_fault_base" >
    insert into t_fault_base (id, type, key_id, 
      fault_type, occur_time, is_cancelled, 
      repair_time, is_repaired, substain_id
      )
    values (#{id,jdbcType=BIGINT}, #{type,jdbcType=INTEGER}, #{key_id,jdbcType=VARCHAR}, 
      #{fault_type,jdbcType=INTEGER}, #{occur_time,jdbcType=TIMESTAMP}, #{is_cancelled,jdbcType=INTEGER}, 
      #{repair_time,jdbcType=TIMESTAMP}, #{is_repaired,jdbcType=INTEGER}, #{substain_id,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" useGeneratedKeys="true" keyProperty="id" parameterType="com.zz.common.model.t_fault_base" >
    insert into t_fault_base
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="key_id != null" >
        key_id,
      </if>
      <if test="fault_type != null" >
        fault_type,
      </if>
      <if test="occur_time != null" >
        occur_time,
      </if>
      <if test="is_cancelled != null" >
        is_cancelled,
      </if>
      <if test="repair_time != null" >
        repair_time,
      </if>
      <if test="is_repaired != null" >
        is_repaired,
      </if>
      <if test="substain_id != null" >
        substain_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
      <if test="key_id != null" >
        #{key_id,jdbcType=VARCHAR},
      </if>
      <if test="fault_type != null" >
        #{fault_type,jdbcType=INTEGER},
      </if>
      <if test="occur_time != null" >
        #{occur_time,jdbcType=TIMESTAMP},
      </if>
      <if test="is_cancelled != null" >
        #{is_cancelled,jdbcType=INTEGER},
      </if>
      <if test="repair_time != null" >
        #{repair_time,jdbcType=TIMESTAMP},
      </if>
      <if test="is_repaired != null" >
        #{is_repaired,jdbcType=INTEGER},
      </if>
      <if test="substain_id != null" >
        #{substain_id,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zz.common.model.t_fault_baseExample" resultType="java.lang.Integer" >
    select count(*) from t_fault_base
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update t_fault_base
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.key_id != null" >
        key_id = #{record.key_id,jdbcType=VARCHAR},
      </if>
      <if test="record.fault_type != null" >
        fault_type = #{record.fault_type,jdbcType=INTEGER},
      </if>
      <if test="record.occur_time != null" >
        occur_time = #{record.occur_time,jdbcType=TIMESTAMP},
      </if>
      <if test="record.is_cancelled != null" >
        is_cancelled = #{record.is_cancelled,jdbcType=INTEGER},
      </if>
      <if test="record.repair_time != null" >
        repair_time = #{record.repair_time,jdbcType=TIMESTAMP},
      </if>
      <if test="record.is_repaired != null" >
        is_repaired = #{record.is_repaired,jdbcType=INTEGER},
      </if>
      <if test="record.substain_id != null" >
        substain_id = #{record.substain_id,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update t_fault_base
    set id = #{record.id,jdbcType=BIGINT},
      type = #{record.type,jdbcType=INTEGER},
      key_id = #{record.key_id,jdbcType=VARCHAR},
      fault_type = #{record.fault_type,jdbcType=INTEGER},
      occur_time = #{record.occur_time,jdbcType=TIMESTAMP},
      is_cancelled = #{record.is_cancelled,jdbcType=INTEGER},
      repair_time = #{record.repair_time,jdbcType=TIMESTAMP},
      is_repaired = #{record.is_repaired,jdbcType=INTEGER},
      substain_id = #{record.substain_id,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.zz.common.model.t_fault_base" >
    update t_fault_base
    <set >
      <if test="type != null" >
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="key_id != null" >
        key_id = #{key_id,jdbcType=VARCHAR},
      </if>
      <if test="fault_type != null" >
        fault_type = #{fault_type,jdbcType=INTEGER},
      </if>
      <if test="occur_time != null" >
        occur_time = #{occur_time,jdbcType=TIMESTAMP},
      </if>
      <if test="is_cancelled != null" >
        is_cancelled = #{is_cancelled,jdbcType=INTEGER},
      </if>
      <if test="repair_time != null" >
        repair_time = #{repair_time,jdbcType=TIMESTAMP},
      </if>
      <if test="is_repaired != null" >
        is_repaired = #{is_repaired,jdbcType=INTEGER},
      </if>
      <if test="substain_id != null" >
        substain_id = #{substain_id,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zz.common.model.t_fault_base" >
    update t_fault_base
    set type = #{type,jdbcType=INTEGER},
      key_id = #{key_id,jdbcType=VARCHAR},
      fault_type = #{fault_type,jdbcType=INTEGER},
      occur_time = #{occur_time,jdbcType=TIMESTAMP},
      is_cancelled = #{is_cancelled,jdbcType=INTEGER},
      repair_time = #{repair_time,jdbcType=TIMESTAMP},
      is_repaired = #{is_repaired,jdbcType=INTEGER},
      substain_id = #{substain_id,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>